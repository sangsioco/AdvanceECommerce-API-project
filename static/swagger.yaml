swagger: '2.0'
info:
  title: "E-commerce API"
  description: "This is an API to manage an E-commerce application"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
#adding security - type in bearer for value after clicking authorize
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
paths:
  /accounts/login:
    post:
      tags:
        - accounts
      summary: "Login endpoint"
      description: "Endpoint for user authentication."
      parameters:
        - in: "body"
          name: "body"
          description: "Credentials for login"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              value:
                auth_token: "abcfdae461fd2456457z16..."
                message: "LoginSuccessful"
                status: "success"
        #added for error handling
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "Invalid credentials"
  /customers:
    get:
      tags:
        - customers
      summary: "Find all customers"
      description: "Retrieve a list of all customers."
      responses:
        200:
          description: "Successful response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Customer"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "Invalid request"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have the required role"
      security:
        - bearerAuth: []
  /employees:
    post:
      tags:
        - employees
      summary: "Create a new employee"
      description: "Add a new employee to the system."
      parameters:
        - in: "body"
          name: "body"
          description: "Employee details"
          required: true
          schema:
            $ref: "#/definitions/Employee"
      responses:
        201:
          description: "Employee created successfully"
          schema:
            $ref: "#/definitions/Employee"
          examples:
            application/json:
              value:
                id: 1
                name: "John Doe"
                position: "Manager"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "Name and position are required fields."
    get:
      tags:
        - employees
      summary: "List all employees"
      description: "Retrieve a list of all employees."
      responses:
        200:
          description: "Successful response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "An unexpected error occurred."
  /products:
    post:
      tags:
        - products
      summary: "Create a new product"
      description: "Add a new product to the system."
      parameters:
        - in: "body"
          name: "body"
          description: "Product details"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        201:
          description: "Product created successfully"
          schema:
            $ref: "#/definitions/Product"
          examples:
            application/json:
              value:
                id: 1
                name: "Product A"
                price: 25.50
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "Name and price are required fields."
    get:
      tags:
        - products
      summary: "List all products"
      description: "Retrieve a list of all products."
      responses:
        200:
          description: "Successful response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "An unexpected error occurred."
  /orders:
    post:
      tags:
        - orders
      summary: "Create a new order"
      description: "Place a new order in the system."
      parameters:
        - in: "body"
          name: "body"
          description: "Order details"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        201:
          description: "Order created successfully"
          schema:
            $ref: "#/definitions/Order"
          examples:
            application/json:
              value:
                id: 1
                customer_id: 1
                product_ids: [1, 2]
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "Customer ID and product IDs are required fields."
    get:
      tags:
        - orders
      summary: "List all orders"
      description: "Retrieve a list of all orders."
      responses:
        200:
          description: "Successful response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "An unexpected error occurred."
  /productions:
    post:
      tags:
        - productions
      summary: "Create a new production record"
      description: "Add a new production record to the system."
      parameters:
        - in: "body"
          name: "body"
          description: "Production details"
          required: true
          schema:
            $ref: "#/definitions/Production"
      responses:
        201:
          description: "Production record created successfully"
          schema:
            $ref: "#/definitions/Production"
          examples:
            application/json:
              value:
                id: 1
                product_id: 1
                quantity_produced: 100
                date_produced: "2024-08-01"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "Product ID, quantity produced, and date produced are required fields."
    get:
      tags:
        - productions
      summary: "List all production records"
      description: "Retrieve a list of all production records."
      responses:
        200:
          description: "Successful response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Production"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "An unexpected error occurred."
definitions:
  LoginCredentials:
    type: "object"
    properties:
      username:
        type: "string"
        description: "Username"
      password:
        type: "string"
        format: "password"
        description: "Password"
    required:
      - "username"
      - "password"
  LoginResponse:
    type: "object"
    properties:
      auth_token:
        type: "string"
        description: "Authentication token"
      message:
        type: "string"
        description: "Message indicating success or failure"
      status:
        type: "string"
        description: "Status of the operation"
    required:
      - "auth_token"
      - "message"
  # adding error handling
  Error:
    type: "object"
    properties:
      status:
        type: "string"
        description: "Status of the error"
      message:
        type: "string"
        description: "Description of the error"
    required:
      - "status"
      - "message"
  Employee:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Employee's unique id"
      name:
        type: "string"
        description: "Employee's name"
      position:
        type: "string"
        description: "Employee's position"
    required:
      - "id"
      - "name"
      - "position"
  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Product's unique id"
      name:
        type: "string"
        description: "Product's name"
      price:
        type: "number"
        format: "float"
        description: "Product's price"
    required:
      - "id"
      - "name"
      - "price"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Order's unique id"
      customer_id:
        type: "integer"
        format: "int64"
        description: "ID of the customer who placed the order"
      product_ids:
        type: "array"
        items:
          type: "integer"
          format: "int64"
        description: "IDs of products in the order"
    required:
      - "id"
      - "customer_id"
      - "product_ids"
  Production:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Production record's unique id"
      product_id:
        type: "integer"
        format: "int64"
        description: "ID of the product produced"
      quantity_produced:
        type: "integer"
        format: "int32"
        description: "Quantity of the product produced"
      date_produced:
        type: "string"
        format: "date"
        description: "Date when the product was produced"
    required:
      - "id"
      - "product_id"
      - "quantity_produced"
      - "date_produced"
